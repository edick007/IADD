





#include <FastLED.h>

// How many leds in your strip?

#define NUM_LEDS 110
#define ODD 1
#define EVEN 2

int data;
unsigned char i = 55;

// For led chips like Neopixels, which have a data line, ground, and power, you just
// need to define DATA_PIN.  For led chipsets that are SPI based (four wires - data, clock,
// ground, and power), like the LPD8806 define both DATA_PIN and CLOCK_PIN
#define DATA_PIN 12
//#define CLOCK_PIN 13

// Define the array of leds
CRGB leds[NUM_LEDS];

void setup() { 
      // Uncomment/edit one of the following lines for your leds arrangement.
      // FastLED.addLeds<TM1803, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<TM1804, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<TM1809, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<WS2811, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<WS2812, DATA_PIN, RGB>(leds, NUM_LEDS);
       FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
    //  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
      // FastLED.addLeds<APA104, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<UCS1903, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<UCS1903B, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<GW6205, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<GW6205_400, DATA_PIN, RGB>(leds, NUM_LEDS);
      
      // FastLED.addLeds<WS2801, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<SM16716, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<LPD8806, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<P9813, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<APA102, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<DOTSTAR, RGB>(leds, NUM_LEDS);

      // FastLED.addLeds<WS2801, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<SM16716, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<LPD8806, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<P9813, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<APA102, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<DOTSTAR, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);


        Serial.begin(9600);
        
        for(unsigned char i = 0; i < 110; i++){
          leds[i] = CRGB(0, 0, 0);
        }
}




void loop() { 





unsigned char EveOddFlag = 0;
if(i <= 10){
  EveOddFlag = ODD; //== 1
}
if(i > 10 && i <= 21){
   EveOddFlag = EVEN; //== 2
}

if(i > 21 && i <= 32){
 EveOddFlag = ODD; //== 1
  }

if(i > 32 && i <=43 ){
 EveOddFlag = EVEN; //== 2
  }
if(i > 43 && i <=54 ){
 EveOddFlag = ODD; //== 1
  }
if(i >54 && i <=65 ){
 EveOddFlag = EVEN; //== 2
  }
if(i >65 && i <= 76){
 EveOddFlag = ODD; //== 1
  }
if(i >76 && i <= 87){
 EveOddFlag = EVEN; //== 2
  }
if(i >87 && i <=98 ){
 EveOddFlag = ODD; //== 1
  }

if(i >98 && i <= 109){
 EveOddFlag = EVEN; //== 2
  }


unsigned char diff = 0;
       

      unsigned char Fringe = 0; // 1  means i  is an edge of matrix

// Odd rows are intuitive and EVEN rows are reveresed.
//Lets set 4 bits for navigation
// up == 1, down  = 8, left = 2, right = 4

 if(Serial.available() > 0)
  {
    data = Serial.read();
    delay(10);
    Serial.println(data);
     // i is the led currently selected leds[i];
    if(data == 1){
       diff = i % 11;
      //go up so 3 options: minus 21 if i is at a EVEN column, minus 1 if i is at a odd col, if i <=10 then do nothing WORNGGGGGG
      if(i <= 10){
       Fringe = 1;
       }
      else{
          Fringe = 0;
       }
      if(EveOddFlag == EVEN && Fringe == 0){
        i = i -((2 * diff) + 1);
      }
      else if(EveOddFlag == ODD && Fringe == 0){ //its an odd row
        
        i = i -((2 * diff) + 1);
      }
      else{
        i = i;
        }
      Fringe = 0;
    }
    
    else if(data == 8){
       diff = i % 11;
      //go down so 3 options: add 1 if the col of i is EVEN, add 21 if col i is ODD, if i >= 99 do nothing haha!
      if(i >= 99){
       Fringe = 1;
       }
      else{
          Fringe = 0;
       }
      if(EveOddFlag == EVEN && Fringe == 0){
        
        i = i + (21 -((2 * diff)));
      }
      else if(EveOddFlag == ODD && Fringe == 0){
        i = i + (21 -((2 * diff)));
      }
      else{
        i = i;
      }
      Fringe = 0; //resets edge
    }
    
    else if(data == 2){
      // go left so 3 options: if i is in EVEN col add 1, if i is in odd col then minus 1, if i is 0, 21, 22, 43, 44, 56, 66, 87, 88, 109 do nothing
      if(i == 0 || i == 21 || i == 22 || i == 43 || i == 44 || i == 56 || i == 66 || i == 87 || i == 88 || i == 109)
      {
        Fringe = 1; // its on an edge so do nothing
      }
      else{
        Fringe = 0;
       }
  
      if(EveOddFlag == EVEN && Fringe == 0){
        i = i + 1; 
      }
      else if(EveOddFlag == ODD && Fringe == 0){
        i = i - 1;
      }
      else{
        i = i;
        }
      Fringe = 0;
    }

    else if(data == 4){
      // go right so 3 options: if i is in EVEN col minus 1, if i is in odd col then add 1, if i is 10, 11, 32, 33, 54, 55, 76, 77, 98, 99 do nothing

      if(i == 10 || i == 11 || i == 32 || i == 33 || i == 54 || i == 55 || i == 76 || i == 77 || i == 98 || i == 99)
      {
        Fringe = 1; // its on an edge so do nothing
      }
      else{
        Fringe = 0;
       }
  
      if(EveOddFlag == EVEN && Fringe == 0){
        i = i - 1; 
      }
      else if(EveOddFlag == ODD && Fringe == 0){
        i = i + 1;
      }
      else{
        i = i;
        }
      Fringe = 0;
    }
    }
    else{
      i = i;
      
    }
    FastLED.clear();
    leds[i] = CRGB(255, 0, 0);
    FastLED.show();

  }


/*
for(char i = 0; i < NUM_LEDS; i++){
  if(i == 0){
    leds[i] = CRGB(255,0,0);
    FastLED.show();
    delay(150);
  }
  
  else{
  leds[i] = CRGB(255,0,0);
  leds[i-1] = CRGB(0,0,0);
  FastLED.show();
  delay(150);
  
  }

}





*/









/*#include <FastLED.h>

// How many leds in your strip?

#define NUM_LEDS 110

// For led chips like Neopixels, which have a data line, ground, and power, you just
// need to define DATA_PIN.  For led chipsets that are SPI based (four wires - data, clock,
// ground, and power), like the LPD8806 define both DATA_PIN and CLOCK_PIN
#define DATA_PIN 12
//#define CLOCK_PIN 13

// Define the array of leds
CRGB leds[NUM_LEDS];

void setup() { 
      // Uncomment/edit one of the following lines for your leds arrangement.
      // FastLED.addLeds<TM1803, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<TM1804, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<TM1809, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<WS2811, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<WS2812, DATA_PIN, RGB>(leds, NUM_LEDS);
       FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS);
    //  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
      // FastLED.addLeds<APA104, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<UCS1903, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<UCS1903B, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<GW6205, DATA_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<GW6205_400, DATA_PIN, RGB>(leds, NUM_LEDS);
      
      // FastLED.addLeds<WS2801, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<SM16716, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<LPD8806, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<P9813, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<APA102, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<DOTSTAR, RGB>(leds, NUM_LEDS);

      // FastLED.addLeds<WS2801, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<SM16716, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<LPD8806, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<P9813, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<APA102, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
      // FastLED.addLeds<DOTSTAR, DATA_PIN, CLOCK_PIN, RGB>(leds, NUM_LEDS);
}



mod11
void loop() { 

i - 11

leds[0] = CRGB(0, 0, 0);leds[1] = CRGB(255, 0, 0);leds[2] = CRGB(0, 0, 0);leds[3] = CRGB(0, 0, 0);leds[4] = CRGB(0, 0, 0);leds[5] = CRGB(0, 0, 0);leds[6] = CRGB(0, 0, 0);leds[7] = CRGB(0, 0, 0);leds[8] = CRGB(0, 0, 0);leds[9] = CRGB(0, 0, 0);leds[10] = CRGB(0, 0, 0);

// col 2
leds[21] = CRGB(0, 0, 0);leds[20] = CRGB(255, 0, 0);leds[19] = CRGB(0, 0, 0);leds[18] = CRGB(255, 0, 0);leds[17] = CRGB(0, 0, 0);leds[16] = CRGB(255, 0, 0);leds[15] = CRGB(255, 0, 0);leds[14] = CRGB(255, 0, 0);leds[13] = CRGB(255, 0, 0);leds[12] = CRGB(255, 0, 0);leds[11] = CRGB(0, 0, 0);

// co3
leds[22] = CRGB(0, 0, 0);leds[23] = CRGB(255, 0, 0);leds[24] = CRGB(0, 0, 0);leds[25] = CRGB(0, 0, 0);leds[26] = CRGB(0, 0, 0);leds[27] = CRGB(255, 0, 0);leds[28] = CRGB(0, 0, 0);leds[29] = CRGB(255, 0, 0);leds[30] = CRGB(0, 0, 0);leds[31] = CRGB(255, 0, 0);leds[32] = CRGB(0, 0, 0);

//co4
leds[43] = CRGB(0, 0, 0);leds[42] = CRGB(255, 0, 0);leds[41] = CRGB(0, 0, 0);leds[40] = CRGB(0, 0, 0);leds[39] = CRGB(0, 0, 0);leds[38] = CRGB(255, 0, 0);leds[37] = CRGB(0, 0, 0);leds[36] = CRGB(255, 0, 0);leds[35] = CRGB(0, 0, 0);leds[34] = CRGB(255, 0, 0);leds[33] = CRGB(0, 0, 0);

//co5
leds[44] = CRGB(0, 0, 0);leds[45] = CRGB(0, 0, 0);leds[46] = CRGB(0, 0, 0);leds[47] = CRGB(0, 0, 0);leds[48] = CRGB(0, 0, 0);leds[49] = CRGB(0, 0, 0);leds[50] = CRGB(0, 0, 0);leds[51] = CRGB(0, 0, 0);leds[52] = CRGB(0, 0, 0);leds[53] = CRGB(0, 0, 0);leds[54] = CRGB(0, 0, 0);

//col6
leds[65] = CRGB(0, 0, 0);leds[64] = CRGB(255, 0, 0);leds[63] = CRGB(255, 0, 0);leds[62] = CRGB(255, 0, 0);leds[61] = CRGB(0, 0, 0);leds[60] = CRGB(255, 0, 0);leds[59] = CRGB(255, 0, 0);leds[58] = CRGB(0, 0, 0);leds[57] = CRGB(0, 0, 0);leds[56] = CRGB(0, 0, 0);leds[55] = CRGB(0, 0, 0); 

//col7
leds[66] = CRGB(0, 0, 0);leds[67] = CRGB(255, 0, 0);leds[68] = CRGB(0, 0, 0);leds[69] = CRGB(0, 0, 0);leds[70] = CRGB(0, 0, 0);leds[71] = CRGB(255, 0, 0);leds[72] = CRGB(0, 0, 0);leds[73] = CRGB(255, 0, 0);leds[74] = CRGB(0, 0, 0);leds[75] = CRGB(0, 0, 0);leds[76] = CRGB(0, 0, 0);

//col8
leds[87] = CRGB(0, 0, 0);leds[86] = CRGB(255, 0, 0);leds[85] = CRGB(255, 0, 0);leds[84] = CRGB(0, 0, 0);leds[83] = CRGB(0, 0, 0);leds[82] = CRGB(255, 0, 0);leds[81] = CRGB(0, 0, 0);leds[80] = CRGB(255, 0, 0);leds[79] = CRGB(0, 0, 0);leds[78] = CRGB(0, 0, 0);leds[77] = CRGB(0, 0, 0);

//col9
leds[88] = CRGB(0, 0, 0);leds[89] = CRGB(255, 0, 0);leds[90] = CRGB(0, 0, 0);leds[91] = CRGB(0, 0, 0);leds[92] = CRGB(0, 0, 0);leds[93] = CRGB(255, 0, 0);leds[94] = CRGB(0, 0, 0);leds[95] = CRGB(255, 0, 0);leds[96] = CRGB(0, 0, 0);leds[97] = CRGB(0, 0, 0);leds[98] = CRGB(0, 0, 0);

//col10
leds[109] = CRGB(0, 0, 0);leds[108] = CRGB(255, 0, 0);leds[107] = CRGB(255, 0, 0);leds[106] = CRGB(255, 0, 0);leds[105] = CRGB(0, 0, 0);leds[104] = CRGB(255, 0, 0);leds[103] = CRGB(255, 0, 0);leds[102] = CRGB(0, 0, 0);leds[101] = CRGB(0, 0, 0);leds[100] = CRGB(0, 0, 0);leds[99] = CRGB(0, 0, 0);

FastLED.show();
delay(500);


leds[0] = CRGB(0, 0, 0);leds[1] = CRGB(0, 0, 0);leds[2] = CRGB(255, 0, 0);leds[3] = CRGB(0, 0, 0);leds[4] = CRGB(0, 0, 0);leds[5] = CRGB(0, 0, 0);leds[6] = CRGB(0, 0, 0);leds[7] = CRGB(0, 0, 0);leds[8] = CRGB(0, 0, 0);leds[9] = CRGB(0, 0, 0);leds[10] = CRGB(0, 0, 0);

// col 2
leds[21] = CRGB(0, 0, 0);leds[20] = CRGB(0, 0, 0);leds[19] = CRGB(255, 0, 0);leds[18] = CRGB(0, 0, 0);leds[17] = CRGB(255, 0, 0);leds[16] = CRGB(0, 0, 0);leds[15] = CRGB(255, 0, 0);leds[14] = CRGB(255, 0, 0);leds[13] = CRGB(255, 0, 0);leds[12] = CRGB(255, 0, 0);leds[11] = CRGB(255, 0, 0);

// co3
leds[22] = CRGB(0, 0, 0);leds[23] = CRGB(0, 0, 0);leds[24] = CRGB(255, 0, 0);leds[25] = CRGB(0, 0, 0);leds[26] = CRGB(0, 0, 0);leds[27] = CRGB(0, 0, 0);leds[28] = CRGB(255, 0, 0);leds[29] = CRGB(0, 0, 0);leds[30] = CRGB(255, 0, 0);leds[31] = CRGB(0, 0, 0);leds[32] = CRGB(255, 0, 0);

//co4
leds[43] = CRGB(0, 0, 0);leds[42] = CRGB(0, 0, 0);leds[41] = CRGB(255, 0, 0);leds[40] = CRGB(0, 0, 0);leds[39] = CRGB(0, 0, 0);leds[38] = CRGB(0, 0, 0);leds[37] = CRGB(255, 0, 0);leds[36] = CRGB(0, 0, 0);leds[35] = CRGB(255, 0, 0);leds[34] = CRGB(0, 0, 0);leds[33] = CRGB(255, 0, 0);

//co5
leds[44] = CRGB(0, 0, 0);leds[45] = CRGB(0, 0, 0);leds[46] = CRGB(0, 0, 0);leds[47] = CRGB(0, 0, 0);leds[48] = CRGB(0, 0, 0);leds[49] = CRGB(0, 0, 0);leds[50] = CRGB(0, 0, 0);leds[51] = CRGB(0, 0, 0);leds[52] = CRGB(0, 0, 0);leds[53] = CRGB(0, 0, 0);leds[54] = CRGB(0, 0, 0);

//col6
leds[65] = CRGB(0, 0, 0);leds[64] = CRGB(0, 0, 0);leds[63] = CRGB(255, 0, 0);leds[62] = CRGB(255, 0, 0);leds[61] = CRGB(255, 0, 0);leds[60] = CRGB(0, 0, 0);leds[59] = CRGB(255, 0, 0);leds[58] = CRGB(255, 0, 0);leds[57] = CRGB(0, 0, 0);leds[56] = CRGB(0, 0, 0);leds[55] = CRGB(0, 0, 0); 

//col7
leds[66] = CRGB(0, 0, 0);leds[67] = CRGB(0, 0, 0);leds[68] = CRGB(255, 0, 0);leds[69] = CRGB(0, 0, 0);leds[70] = CRGB(0, 0, 0);leds[71] = CRGB(0, 0, 0);leds[72] = CRGB(255, 0, 0);leds[73] = CRGB(0, 0, 0);leds[74] = CRGB(255, 0, 0);leds[75] = CRGB(0, 0, 0);leds[76] = CRGB(0, 0, 0);

//col8
leds[87] = CRGB(0, 0, 0);leds[86] = CRGB(0, 0, 0);leds[85] = CRGB(255, 0, 0);leds[84] = CRGB(255, 0, 0);leds[83] = CRGB(0, 0, 0);leds[82] = CRGB(0, 0, 0);leds[81] = CRGB(255, 0, 0);leds[80] = CRGB(0, 0, 0);leds[79] = CRGB(255, 0, 0);leds[78] = CRGB(0, 0, 0);leds[77] = CRGB(0, 0, 0);

//col9
leds[88] = CRGB(0, 0, 0);leds[89] = CRGB(0, 0, 0);leds[90] = CRGB(255, 0, 0);leds[91] = CRGB(0, 0, 0);leds[92] = CRGB(0, 0, 0);leds[93] = CRGB(0, 0, 0);leds[94] = CRGB(255, 0, 0);leds[95] = CRGB(0, 0, 0);leds[96] = CRGB(255, 0, 0);leds[97] = CRGB(0, 0, 0);leds[98] = CRGB(0, 0, 0);

//col10
leds[109] = CRGB(0, 0, 0);leds[108] = CRGB(0, 0, 0);leds[107] = CRGB(255, 0, 0);leds[106] = CRGB(255, 0, 0);leds[105] = CRGB(255, 0, 0);leds[104] = CRGB(0, 0, 0);leds[103] = CRGB(255, 0, 0);leds[102] = CRGB(255, 0, 0);leds[101] = CRGB(0, 0, 0);leds[100] = CRGB(0, 0, 0);leds[99] = CRGB(0, 0, 0);

FastLED.show();
delay(500);

FastLED.clear();
/*
for(char i = 0; i < NUM_LEDS; i++){
  if(i == 0){
    leds[i] = CRGB(255,0,0);
    FastLED.show();
    delay(150);
  }
  
  else{
  leds[i] = CRGB(255,0,0);
  leds[i-1] = CRGB(0,0,0);
  FastLED.show();
  delay(150);
  
  }
}
*/
/*
}
*/



